
TASK.1

#1
2.5.3 :001 > a = "arya12345"
 => "arya12345" 
2.5.3 :002 > p /\d{3,5}/.match(a)
#<MatchData "12345">
 => #<MatchData "12345"> 


...........................................................................................................................
#2
2.5.3 :003 > b = "hellogirlhelloboy"
 => "hellogirlhelloboy" 
2.5.3 :004 > p /hello/.match(b)
#<MatchData "hello">
 => #<MatchData "hello"> 



.............................................................................................................................
#3
2.5.3 :005 > x = "hello123four"
 => "hello123four" 
2.5.3 :006 > p /hello\d{3}/.match(x)
#<MatchData "hello123">
 => #<MatchData "hello123"> 

......................................................................................................
#4
2.5.3 :007 > b = "helloGoodmorning"
 => "helloGoodmorning" 
2.5.3 :008 > p /hello/.match(b)
#<MatchData "hello">
 => #<MatchData "hello"> 
..............................................................................................................................

TASK 2




#1
2.5.3 :028 >  a = "demo@rubyians.com"
 => "demo@rubyians.com" 
2.5.3 :029 > p /\w{1,}@\w{1,}.[a-z]{3}/.match(a)
#<MatchData "demo@rubyians.com">
 => #<MatchData "demo@rubyians.com"> 

.......................................................................................................................................
#2
 m = "123456,123"
p /\d{6}/.match(m)

.........................................................................................................................

#3
 n= "919747718010, +9197"
p /^\+(?:[0-9]){12}/.match(n)




.................................................................................................................................


#4

h = "http://www.rubysoftware.tech/"
p /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.match(h)
.....................................................................................................................................

TASK 3



# {string}

s = 'This is a simple string.' 
regex = /simple/
match = regex.match(s)
puts "First letter s at position #{match.begin(0)}" 
puts "Last letter e at position #{match.end(0)}" 
.................................................................................................................................
TASK 4


#1
a = gets.to_s
if /^\+(?:[0-9]){12}/.match(a)
  n.gsub!(a, 'XXXX-XXX-XXX')
  puts a
end
......................................................................................................................................
#2

a = gets.to_s
if /\w{1,}@\w{1,}.[a-z]{3}/.match(a)
  a.gsub!(a,'demo@example.com')
  puts a
end


.....................................................................................................................................
#3
a = gets.to_s
if /^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$/.match(a)
  a.gsub!(a,'www.example.com')
  puts a
end

..............................................................................................................................................

#4
counter = 0 
if a.scan(/\n/) { |match| counter += 1   };end

p "Number of lines are #{counter1}"
.....................................................................................................

#5

iscounter = 0
if a.scan(/is/i) { |match| iscounter += 1 };end
puts "Number of 'is' #{iscounter}"

thecounter = 0 
if a.scan(/the/i) { |match| thecounter += 1 };end
puts "Number of 'the' #{thecounter}"

andcounter = 0 
if a.scan(/and/i) { |match| andcounter += 1 };end
puts "Number of 'and' #{andcounter}"

................................................................................................................

................................................................................................................................................




